services:
  node:
    image: node:transcendence
    pull_policy: never
    container_name: node
    volumes:
      - ${PROJECT_DIR}/requirements/node/conf/src:/workspace/src
      - logs_volume:/logs
    restart: always
    ports:
      - 8080:8080
    networks:
      - my_net
    build: 
      context: ${PROJECT_DIR}/requirements/node/
      dockerfile: dockerfile
    healthcheck:
      test: ["CMD-SHELL", "curl -I localhost:8080 | grep -q 'HTTP/1.1 200 OK'"]
      interval: 10s
      timeout: 10s
      retries: 5
  
  userserver:
    depends_on:
      userdb:
        condition: service_healthy
      # vault_init:
      #   condition: service_completed_successfully
    pull_policy: never
    image: python:userserver
    container_name: userserver
    volumes:
      - ${PROJECT_DIR}/requirements/user_server/${DJANGO_PROJECT_NAME}:/app/${DJANGO_PROJECT_NAME}
      - avatars_volume:/app/${DJANGO_PROJECT_NAME}/avatars
    environment:
      USERDATA_DB_NAME: ${USERDATA_DB_NAME}
      USERDATA_DB_USER: ${USERDATA_DB_USER}
      USERDATA_DB_PW: ${USERDATA_DB_PW}
      CLIENT_ID: ${CLIENT_ID}
      CLIENT_SECRET: ${CLIENT_SECRET}
    # ports:
    #   - 8000:8000
    networks:
      - my_net
    build:
      context: ${PROJECT_DIR}/requirements/user_server
      dockerfile: dockerfile
    healthcheck:
      test: ["CMD-SHELL", "curl -I localhost:8000 | grep -q 'HTTP/1.1 404 Not Found'"]
      interval: 5s
      timeout: 1s
      retries: 3
      start_period: 1s

  userdb:
    image: postgres:userserver
    pull_policy: never
    container_name: userdb
    volumes:
      - userdb_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_LISTEN_ADDRESSES: '*'
      USERDATA_DB_NAME: ${USERDATA_DB_NAME}
      USERDATA_DB_USER: ${USERDATA_DB_USER}
      USERDATA_DB_PW: ${USERDATA_DB_PW}
    networks:
      - my_net
    build:
      context: ${PROJECT_DIR}/requirements/user_db
      dockerfile: dockerfile
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 1s
      timeout: 5s
      retries: 3
      start_period: 1s

  gameserver:
    image: python:gameserver
    pull_policy: never
    depends_on:
      gamedb:
        condition: service_healthy
      redis:
        condition: service_healthy
    build:
      context: ${PROJECT_DIR}/requirements/game_server
      dockerfile: dockerfile
    container_name: gameserver
    volumes:
      - ${PROJECT_DIR}/requirements/game_server/${DJANGO_PROJECT_NAME}:/app/${DJANGO_PROJECT_NAME}
    # ports:
    #   - 8001:8001
    environment:
      GAMEDATA_DB_NAME: ${GAMEDATA_DB_NAME}
      GAMEDATA_DB_USER: ${USERDATA_DB_USER}
      GAMEDATA_DB_PW: ${USERDATA_DB_PW}
    networks:
      - my_net
    # healthcheck:
    #   test: ["CMD-SHELL", "curl -s localhost:8001"]
    #   interval: 1s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 1s

  gamedb:
    image: postgres:gameserver
    pull_policy: never
    container_name: gamedb
    build:
      context: ${PROJECT_DIR}/requirements/game_db
      dockerfile: dockerfile
    volumes:
      - gamedb_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_LISTEN_ADDRESSES: '*'
      GAMEDATA_DB_NAME: ${GAMEDATA_DB_NAME}
      GAMEDATA_DB_USER: ${USERDATA_DB_USER}
      GAMEDATA_DB_PW: ${USERDATA_DB_PW}
    networks:
      - my_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p 5431 -U $POSTGRES_USER"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  redis:
    image: redis:transcendence
    pull_policy: never
    build:
      context: ${PROJECT_DIR}/requirements/redis
      dockerfile: dockerfile
    container_name: redis
    networks:
      - my_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 10s

  nginx:
    depends_on:
      cert_setup:
        condition: service_completed_successfully
      userserver:
        condition: service_healthy
    user: "0"
    image: owasp/modsecurity-crs:4.2.0-nginx-alpine-202405101205
    container_name: nginx
    volumes:
      - ${PROJECT_DIR}/requirements/nginx/conf/:/etc/nginx/templates/conf.d/:ro
      - certs_volume:/certs:ro
      - logs_volume:/logs
      - avatars_volume:/django/avatars/:ro
    ports:
      - 8000:8000
      - 8001:8001
      - 9090:9090
      - 4242:4242
    networks:
      - my_net
    healthcheck:
      test: ["CMD-SHELL", "curl -k -I -s https://localhost:443 | grep -q 'Server: nginx'"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

volumes:
  userdb_volume:
    name: userdb_volume
    driver: local
  gamedb_volume:
    name: gamedb_volume
    driver: local
  avatars_volume:
    name: avatars_volume
    driver: local

